set version 3.1
package provide DSx_plugin_UI.dsx 1.0
DSx_plugin_page_name DSx_plugin_UI

add_de1_variable "DSx_plugin_UI" 1280 60 -font [DSx_font font 10] -fill $::DSx_settings(font_colour) -anchor "center" -textvariable {DSx Plugin UI page}

add_de1_variable "DSx_plugin_UI" 2150 1520 -text "" -font [DSx_font font 7] -fill $::DSx_settings(font_colour) -justify center -anchor center -textvariable {DSx plugin UI [package version DSx_plugin_UI]}
lappend ::run_after_startup fill_DSx_active_plugin_listbox

### left list
add_de1_variable "DSx_plugin_UI" 400 260 -font [DSx_font font 10] -fill $::DSx_settings(font_colour) -anchor "center" -textvariable {Active plugins}
set ::allow_plugin_UI_inactive 0
set ::DSx_plugin_message ""
add_de1_widget "DSx_plugin_UI" checkbutton 20 1450 {set ::DSx_4_workflow_checkbutton_1 $widget} -text [translate " Select to add this page to the list\r Note: you can not re-activate this plugin from the app"] -indicatoron true  -font "[DSx_font font 8]" -bg $::DSx_settings(bg_colour) -justify left -anchor nw -foreground $::DSx_settings(font_colour) -variable ::allow_plugin_UI_inactive -borderwidth 0 -selectcolor $::DSx_settings(bg_colour) -highlightthickness 0 -activebackground $::DSx_settings(bg_colour) -bd 0 -activeforeground $::DSx_settings(orange) -relief flat -command fill_DSx_active_plugin_listbox;

proc DSx_active_plugin_files {} {
	set files [lsort -dictionary [glob -nocomplain -tails -directory "[homedir]/skins/DSx/DSx_Plugins/" *.dsx]]
    set files [lsearch -inline -all -not -exact $files DSx_admin.dsx]
    set files [lsearch -inline -all -not -exact $files DSx_backup.dsx]
    set files [lsearch -inline -all -not -exact $files DSx_cal.dsx]
    set files [lsearch -inline -all -not -exact $files DSx_coffee.dsx]
    set files [lsearch -inline -all -not -exact $files DSx_theme.dsx]
    set files [lsearch -inline -all -not -exact $files DSx_workflow.dsx]
    if {$::allow_plugin_UI_inactive == 0} {set files [lsearch -inline -all -not -exact $files DSx_plugin_UI.dsx]}
	set dd {}
	foreach f $files {
	    set fn "[homedir]skins/DSx/DSx_Plugins/$f"
	    set name [file rootname $f]
	    set space { }
	    set name $name$space[package versions $name]
		lappend dd $name $f
	}
	return $dd
}

proc fill_DSx_active_plugin_listbox {} {
	unset -nocomplain ::DSx_active_plugin_filenames
	set widget $::globals(DSx_active_plugin_widget)
	$widget delete 0 99999
	set cnt 0
	array set DSx_active_plugin_files_array [DSx_active_plugin_files]
	foreach desc [lsort -decreasing -dictionary [array names DSx_active_plugin_files_array]] {
		set fn $DSx_active_plugin_files_array($desc)
		$widget insert $cnt $desc
		set ::DSx_active_plugin_filenames($cnt) $fn

		incr cnt
	}
}

add_de1_widget "DSx_plugin_UI" listbox 40 330 {
	set ::globals(DSx_active_plugin_widget) $widget
	fill_DSx_active_plugin_listbox
	bind $widget <<ListboxSelect>> DSx_active_plugin_rename;
} -background $::DSx_settings(bg_colour) -yscrollcommand {scale_scroll ::DSx_active_plugin_slider} -font [DSx_font font 8] -bd 0 -height 14 -width 28 -foreground $::DSx_settings(font_colour) -borderwidth 0 -selectborderwidth 0  -relief flat -highlightthickness 0 -selectmode single  -selectbackground $::DSx_settings(font_colour)


set ::DSx_active_plugin_slider 0

set ::DSx_active_plugin_scrollbar [add_de1_widget "DSx_plugin_UI" scale 644 330 {} -from 0 -to .50 -bigincrement 0.2 -background $::DSx_settings(font_colour) -borderwidth 1 -showvalue 0 -resolution .01 -length [rescale_x_skin 800] -width [rescale_y_skin 120] -variable plugin_left -font [DSx_font font 10] -sliderlength [rescale_x_skin 125] -relief flat -command {listbox_moveto $::globals(DSx_active_plugin_widget) $::DSx_active_plugin_slider}  -foreground #FFFFFF -troughcolor $::DSx_settings(bg_colour) -borderwidth 0  -highlightthickness 0]
proc set_DSx_active_plugin_scrollbar_dimensions {} {
	# set the height of the scrollbar to be the same as the listbox
	$::DSx_active_plugin_scrollbar configure -length [winfo height $::globals(DSx_active_plugin_widget)]
	set coords [.can coords $::globals(DSx_active_plugin_widget) ]
	set newx [expr {[winfo width $::globals(DSx_active_plugin_widget)] + [lindex $coords 0]}]
	.can coords $::DSx_active_plugin_scrollbar "$newx [lindex $coords 1]"
}


### right list
add_de1_variable "DSx_plugin_UI" 1160 260 -font [DSx_font font 10] -fill $::DSx_settings(font_colour) -anchor "center" -textvariable {Inactive plugins}

proc DSx_inactive_plugin_files {} {
	set files [lsort -dictionary [glob -nocomplain -tails -directory "[homedir]/skins/DSx/DSx_Plugins/" *.off]]
	set dd {}
	foreach f $files {
	    set fn "[homedir]skins/DSx/DSx_Plugins/$f"
	    set name [file rootname $f]
		lappend dd $name $f
	}
	return $dd
}

proc fill_DSx_inactive_plugin_listbox {} {
	unset -nocomplain ::DSx_inactive_plugin_filenames
	set widget $::globals(DSx_inactive_plugin_widget)
	$widget delete 0 99999
	set cnt 0
	array set DSx_inactive_plugin_files_array [DSx_inactive_plugin_files]
	foreach desc [lsort -decreasing -dictionary [array names DSx_inactive_plugin_files_array]] {
		set fn $DSx_inactive_plugin_files_array($desc)
		$widget insert $cnt $desc
		set ::DSx_inactive_plugin_filenames($cnt) $fn

		incr cnt
	}
}

add_de1_widget "DSx_plugin_UI" listbox 800 330 {
	set ::globals(DSx_inactive_plugin_widget) $widget
	fill_DSx_inactive_plugin_listbox
	bind $widget <<ListboxSelect>> DSx_inactive_plugin_rename;
} -background $::DSx_settings(bg_colour) -yscrollcommand {scale_scroll ::DSx_inactive_plugin_slider} -font [DSx_font font 8] -bd 0 -height 14 -width 28 -foreground $::DSx_settings(font_colour) -borderwidth 0 -selectborderwidth 0  -relief flat -highlightthickness 0 -selectmode single  -selectbackground $::DSx_settings(font_colour)


set ::DSx_inactive_plugin_slider 0

set ::DSx_inactive_plugin_scrollbar [add_de1_widget "DSx_plugin_UI" scale 1404 330 {} -from 0 -to .50 -bigincrement 0.2 -background $::DSx_settings(font_colour) -borderwidth 1 -showvalue 0 -resolution .01 -length [rescale_x_skin 800] -width [rescale_y_skin 120] -variable plugin_right -font [DSx_font font 10] -sliderlength [rescale_x_skin 125] -relief flat -command {listbox_moveto $::globals(DSx_inactive_plugin_widget) $::DSx_inactive_plugin_slider}  -foreground #FFFFFF -troughcolor $::DSx_settings(bg_colour) -borderwidth 0  -highlightthickness 0]
proc set_DSx_inactive_plugin_scrollbar_dimensions {} {
	# set the height of the scrollbar to be the same as the listbox
	$::DSx_inactive_plugin_scrollbar configure -length [winfo height $::globals(DSx_inactive_plugin_widget)]
	set coords [.can coords $::globals(DSx_inactive_plugin_widget) ]
	set newx [expr {[winfo width $::globals(DSx_inactive_plugin_widget)] + [lindex $coords 0]}]
	.can coords $::DSx_inactive_plugin_scrollbar "$newx [lindex $coords 1]"
}

proc DSx_plugin_dir {} {
    return [homedir]/skins/DSx/DSx_Plugins
}

proc DSx_active_plugin_rename {} {
    catch {
        set ::restart 1
        set w $::globals(DSx_active_plugin_widget)
        unset -nocomplain plugin
        set cnt [$w curselection]
        set plugin [file rootname $::DSx_active_plugin_filenames($cnt)]
        set fn "[DSx_plugin_dir]/${plugin}.dsx"
        set nfn "[DSx_plugin_dir]/${plugin}.off"
        if {[catch {file rename $fn $nfn} err] == 0} {
            set ::DSx_plugin_message " $plugin   deactivated! \r\r When you tap the home button, you will be asked\r to exit and restart the app"
            fill_DSx_active_plugin_listbox
            fill_DSx_inactive_plugin_listbox
        } else {
            set ::DSx_plugin_message "Oops, try again"
            fill_DSx_active_plugin_listbox
            fill_DSx_intive_plugin_listbox
        }
    }
}
add_de1_variable "DSx_plugin_UI" 1200 1320 -text "" -font Helv_8 -fill #ff574a -anchor center -justify center -textvariable {$::DSx_plugin_message}

proc DSx_inactive_plugin_rename {} {
    catch {
        set ::restart 1
        set iw $::globals(DSx_inactive_plugin_widget)
        unset -nocomplain iplugin
        set icnt [$iw curselection]
        set iplugin [file rootname $::DSx_inactive_plugin_filenames($icnt)]
        set ifn "[DSx_plugin_dir]/${iplugin}.off"
        set infn "[DSx_plugin_dir]/${iplugin}.dsx"
        if {[catch {file rename $ifn $infn} err] == 0} {
            unset -nocomplain version

            if {[catch {source  [file join "./skins/DSx/DSx_Plugins/" ${iplugin}.dsx]} err] == 0} {

                if {[info exists version] != 1} {
                    set version {1.0}
                }
                package ifneeded ${iplugin} $version [list source [file join "./skins/DSx/DSx_Plugins/" $infn]]
                set ::DSx_plugin_message "$iplugin   activated! \r\r When you tap the home button, you will be asked\r to exit and restart the app"
                fill_DSx_active_plugin_listbox
                fill_DSx_inactive_plugin_listbox
            } else {
                file rename $infn $ifn
                set ::DSx_plugin_message "That pluging has problems!"
            }
        } else {
            set ::DSx_plugin_message "Oops, try again"
            fill_DSx_inactive_plugin_listbox
            fill_DSx_active_plugin_listbox
        }
    }
}


### Page from sleep ###
add_de1_variable "DSx_plugin_UI" 2000 300 -text "" -font Helv_8 -fill $::DSx_settings(font_colour) -anchor center -justify center -textvariable {You can select a page to show when you tap\rthe left 1/2 of screen saver without waking\rthe machine. Allowing you to use plugins\rwhile the machine is sleeping}
add_de1_variable "DSx_plugin_UI" 2000 700 -text "" -font Helv_7 -fill $::DSx_settings(font_colour) -anchor center -justify center -textvariable {If you have activated/deactivated plugins on the left,\rthe list may not be current, please restart to update}
add_de1_image "DSx_plugin_UI" 1810 430 "[skin_directory_graphics]/icons/button8.png"
add_de1_variable "DSx_plugin_UI" 2000 530 -text "" -font Helv_8 -fill $::DSx_settings(orange) -anchor center -justify center -textvariable {$::DSx_settings(first_page_from_saver)}
add_de1_button "DSx_plugin_UI" {toggle_active_plugin_list} 1800 430 2200 630

proc DSx_page_left2 {} {

    set pages [lsort -dictionary $::DSx_page_name]
    lappend pages {off}
    set pages [lsearch -inline -all -not -exact $pages DSx_5_admin]
    set pages [lsearch -inline -all -not -exact $pages DSx_7_backup]
    set pages [lsearch -inline -all -not -exact $pages DSx_2_cal]
    set pages [lsearch -inline -all -not -exact $pages DSx_3_coffee]
    set pages [lsearch -inline -all -not -exact $pages DSx_6_theme]
    set pages [lsearch -inline -all -not -exact $pages DSx_4_workflow]
    set index [lsearch $pages $::DSx_settings(first_page_from_saver)]
    set sl [DSx_list_rotate $pages]
    set y [lindex $sl $index]
    return $y
}

proc toggle_active_plugin_list {} {
    if {[lsearch -exact $::DSx_page_name $::DSx_settings(first_page_from_saver)] == -1} {
        set ::DSx_settings(first_page_from_saver) off
    }
    set ::DSx_settings(first_page_from_saver) [DSx_page_left2]

}
